close all; clear; clc;

[M, rhs, tsol] = import_vectors("vectors.csv");
[D_0, D_1, L_0, L_1, G_0, G_1, T_0, T_1] = import_operators("operators.csv");

for i = 1:length(G_0)
    if (abs(G_0(i)) < 1.0e-12)
        D_0(i) = 0;
        D_1(i) = 0;
        L_0(i) = 0;
        L_1(i) = 0;
        G_0(i) = 0;
        G_1(i) = 0;
        T_0(i) = 0;
        T_1(i) = 0;
    end
end

M = spdiags(M,0,length(M),length(M)); 

D_0 = reshape(D_0,[sqrt(length(D_0)),sqrt(length(D_0))])';
D_1 = reshape(D_1,[sqrt(length(D_1)),sqrt(length(D_1))])';

L_0 = reshape(L_0,[sqrt(length(L_0)),sqrt(length(L_0))])';
L_1 = reshape(L_1,[sqrt(length(L_1)),sqrt(length(L_1))])';

G_0 = reshape(G_0,[sqrt(length(G_0)),sqrt(length(G_0))])';
G_1 = reshape(G_1,[sqrt(length(G_1)),sqrt(length(G_1))])';

T_0 = reshape(T_0,[sqrt(length(T_0)),sqrt(length(T_0))])';
T_1 = reshape(T_1,[sqrt(length(T_1)),sqrt(length(T_1))])';

D_0 = sparse(D_0);
D_1 = sparse(D_1);

L_0 = sparse(L_0);
L_1 = sparse(L_1);

G_0 = sparse(G_0);
G_1 = sparse(G_1);

T_0 = sparse(T_0);
T_1 = sparse(T_1);

A = (L_0 + D_0)' * M * (L_0 + D_0) + (L_1' + D_1)' * M * (L_1' + D_1);
sol = A\(M*rhs);

norm(sol-tsol)

test_fun = zeros(36,1);
test_fun(1) = 1; test_fun(10) = 1; test_fun(19) = 1; test_fun(28) = 1;


function [mass, rhs, sol] = import_vectors(filename, dataLines)
%IMPORTFILE Import data from a text file
%  [MASS, RHS, SOL] = IMPORTFILE(FILENAME) reads data from text file
%  FILENAME for the default selection.  Returns the data as column
%  vectors.
%
%  [MASS, RHS, SOL] = IMPORTFILE(FILE, DATALINES) reads data for the
%  specified row interval(s) of text file FILENAME. Specify DATALINES as
%  a positive scalar integer or a N-by-2 array of positive scalar
%  integers for dis-contiguous row intervals.
%
%  Example:
%  [mass, rhs, sol] = importfile("/home/mblomquist/CLionProjects/LDG_Poisson/out/vectors.csv", [2, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 31-Jul-2023 13:48:22

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 3);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["mass", "rhs", "sol"];
opts.VariableTypes = ["double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
tbl = readtable(filename, opts);

%% Convert to output type
mass = tbl.mass;
rhs = tbl.rhs;
sol = tbl.sol;
end




function [D_0, D_1, L_0, L_1, G_0, G_1, T_0, T_1] = import_operators(filename, dataLines)
%IMPORTFILE Import data from a text file
%  [D_0, D_1, L_0, L_1, G_0, G_1, T_0, T_1] = IMPORTFILE(FILENAME) reads
%  data from text file FILENAME for the default selection.  Returns the
%  data as column vectors.
%
%  [D_0, D_1, L_0, L_1, G_0, G_1, T_0, T_1] = IMPORTFILE(FILE,
%  DATALINES) reads data for the specified row interval(s) of text file
%  FILENAME. Specify DATALINES as a positive scalar integer or a N-by-2
%  array of positive scalar integers for dis-contiguous row intervals.
%
%  Example:
%  [D_0, D_1, L_0, L_1, G_0, G_1, T_0, T_1] = importfile("/home/mblomquist/CLionProjects/LDG_Poisson/out/operators.csv", [2, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 31-Jul-2023 13:43:46

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 8);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["D_0", "D_1", "L_0", "L_1", "G_0", "G_1", "T_0", "T_1"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
tbl = readtable(filename, opts);

%% Convert to output type
D_0 = tbl.D_0;
D_1 = tbl.D_1;
L_0 = tbl.L_0;
L_1 = tbl.L_1;
G_0 = tbl.G_0;
G_1 = tbl.G_1;
T_0 = tbl.T_0;
T_1 = tbl.T_1;
end
